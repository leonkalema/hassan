name: Sync Translations to Supabase Storage

on:
  push:
    branches: [ main ]
    paths:
      - 'src/data/i18n/translations/en.json'
  workflow_dispatch:

jobs:
  sync-translations:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install @supabase/supabase-js
          
      - name: Check environment variables
        run: |
          if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            echo "‚ùå SUPABASE_URL secret is not set"
            echo "Please add SUPABASE_URL to your GitHub repository secrets"
            exit 1
          fi
          if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
            echo "‚ùå SUPABASE_SERVICE_ROLE_KEY secret is not set"
            echo "Please add SUPABASE_SERVICE_ROLE_KEY to your GitHub repository secrets"
            exit 1
          fi
          echo "‚úÖ Environment variables are set"
          
      - name: Upload en.json to Supabase Storage
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          cat > upload-script.js << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');
          const crypto = require('crypto');
          
          async function uploadTranslation() {
            try {
              console.log('üöÄ Starting translation sync to Supabase Storage...');
              console.log('SUPABASE_URL:', process.env.SUPABASE_URL ? 'Set' : 'Missing');
              console.log('SERVICE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'Set' : 'Missing');
              
              const supabase = createClient(
                process.env.SUPABASE_URL,
                process.env.SUPABASE_SERVICE_ROLE_KEY
              );
              
              // First, check if the bucket exists and create it if needed
              console.log('üìã Checking if translations bucket exists...');
              const { data: buckets, error: listError } = await supabase.storage.listBuckets();
              
              if (listError) {
                console.error('Error listing buckets:', listError);
                throw listError;
              }
              
              const translationsBucket = buckets.find(bucket => bucket.name === 'translations');
              
              if (!translationsBucket) {
                console.log('üìã Creating translations bucket...');
                const { data: newBucket, error: createError } = await supabase.storage.createBucket('translations', {
                  public: false,
                  allowedMimeTypes: ['application/json'],
                  fileSizeLimit: 1024 * 1024 // 1MB
                });
                
                if (createError) {
                  console.error('Error creating bucket:', createError);
                  throw createError;
                }
                
                console.log('‚úÖ Translations bucket created successfully');
              } else {
                console.log('‚úÖ Translations bucket already exists');
              }
              
              // Read the English translation file
              const enContent = fs.readFileSync('src/data/i18n/translations/en.json', 'utf8');
              const enData = JSON.parse(enContent);
              
              // Generate hash for change detection
              const contentHash = crypto.createHash('sha256').update(enContent).digest('hex');
              
              // Add metadata
              const fileWithMetadata = {
                ...enData,
                _metadata: {
                  hash: contentHash,
                  lastUpdated: new Date().toISOString(),
                  source: 'github-action',
                  version: '1.0.0'
                }
              };
              
              // Upload to Supabase Storage
              console.log('üì§ Uploading en.json to Supabase Storage...');
              const filePath = 'en.json';
              const { data, error } = await supabase.storage
                .from('translations')
                .upload(filePath, JSON.stringify(fileWithMetadata, null, 2), {
                  contentType: 'application/json',
                  upsert: true
                });
                
              if (error) {
                console.error('‚ùå Error uploading to Supabase Storage:', error);
                throw error;
              }
              
              console.log('‚úÖ Successfully uploaded en.json to Supabase Storage');
              console.log('üìä File hash:', contentHash);
              console.log('üîÑ Other language translations will be regenerated on-demand');
              
            } catch (error) {
              console.error('üí• Upload failed:', error.message);
              console.error('Full error:', error);
              process.exit(1);
            }
          }
          
          uploadTranslation();
          EOF
          
          node upload-script.js
          
      - name: Verify upload
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          node -e "
          const { createClient } = require('@supabase/supabase-js');
          
          async function verifyUpload() {
            const supabase = createClient(
              process.env.SUPABASE_URL,
              process.env.SUPABASE_SERVICE_ROLE_KEY
            );
            
            const { data, error } = await supabase.storage
              .from('translations')
              .download('translations/en.json');
              
            if (error) {
              console.error('‚ùå Verification failed:', error);
              process.exit(1);
            }
            
            console.log('‚úÖ Upload verified successfully');
            console.log('üåç Translation system is ready for on-demand generation');
          }
          
          verifyUpload().catch(console.error);
          "
