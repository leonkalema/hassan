name: Sync Translations to Supabase Storage

on:
  push:
    branches: [ main ]
    paths:
      - 'src/data/i18n/translations/en.json'
  workflow_dispatch:

jobs:
  sync-translations:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install @supabase/supabase-js
          
      - name: Check environment variables
        run: |
          if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            echo "❌ SUPABASE_URL secret is not set"
            echo "Please add SUPABASE_URL to your GitHub repository secrets"
            exit 1
          fi
          if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
            echo "❌ SUPABASE_SERVICE_ROLE_KEY secret is not set"
            echo "Please add SUPABASE_SERVICE_ROLE_KEY to your GitHub repository secrets"
            exit 1
          fi
          echo "✅ Environment variables are set"
          
      - name: Upload en.json to Supabase Storage
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          cat > upload-script.js << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');
          const crypto = require('crypto');
          
          async function uploadTranslation() {
            try {
              console.log('🚀 Starting translation sync to Supabase Storage...');
              console.log('SUPABASE_URL:', process.env.SUPABASE_URL ? 'Set' : 'Missing');
              console.log('SERVICE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'Set' : 'Missing');
              
              const supabase = createClient(
                process.env.SUPABASE_URL,
                process.env.SUPABASE_SERVICE_ROLE_KEY
              );
              
              // First, check if the bucket exists and create it if needed
              console.log('📋 Checking if data bucket exists...');
              const { data: buckets, error: listError } = await supabase.storage.listBuckets();
              
              if (listError) {
                console.error('Error listing buckets:', listError);
                throw listError;
              }
              
              const dataBucket = buckets.find(bucket => bucket.name === 'data');
              
              if (!dataBucket) {
                console.log('📋 Creating data bucket...');
                const { data: newBucket, error: createError } = await supabase.storage.createBucket('data', {
                  public: false,
                  allowedMimeTypes: ['application/json'],
                  fileSizeLimit: 1024 * 1024 // 1MB
                });
                
                if (createError) {
                  console.error('Error creating bucket:', createError);
                  throw createError;
                }
                
                console.log('✅ Data bucket created successfully');
              } else {
                console.log('✅ Data bucket already exists');
              }
              
              // Read the English translation file
              const enContent = fs.readFileSync('src/data/i18n/translations/en.json', 'utf8');
              const enData = JSON.parse(enContent);
              
              // Generate hash for change detection
              const contentHash = crypto.createHash('sha256').update(enContent).digest('hex');
              
              // Add metadata
              const fileWithMetadata = {
                ...enData,
                _metadata: {
                  hash: contentHash,
                  lastUpdated: new Date().toISOString(),
                  source: 'github-action',
                  version: '1.0.0'
                }
              };
              
              // Upload to Supabase Storage
              console.log('📤 Uploading en.json to Supabase Storage...');
              const filePath = 'en.json';
              const { data, error } = await supabase.storage
                .from('data')
                .upload(filePath, JSON.stringify(fileWithMetadata, null, 2), {
                  contentType: 'application/json',
                  upsert: true
                });
                
              if (error) {
                console.error('❌ Error uploading to Supabase Storage:', error);
                throw error;
              }
              
              console.log('✅ Successfully uploaded en.json to Supabase Storage');
              console.log('📊 File hash:', contentHash);
              console.log('🔄 Other language translations will be regenerated on-demand');
              
            } catch (error) {
              console.error('💥 Upload failed:', error.message);
              console.error('Full error:', error);
              process.exit(1);
            }
          }
          
          uploadTranslation();
          EOF
          
          node upload-script.js
          
      - name: Trigger translation pipeline
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "🚀 Triggering sequential translation pipeline..."
          
          node -e '
          const { createClient } = require("@supabase/supabase-js");
          
          async function triggerTranslationPipeline() {
            const supabase = createClient(
              process.env.SUPABASE_URL,
              process.env.SUPABASE_SERVICE_ROLE_KEY
            );
            
            // Read the uploaded English file to get hash
            const { data: enData } = await supabase.storage
              .from('data')
              .download('en.json');
              
            if (!enData) {
              console.error('ERROR: English source file not found');
              process.exit(1);
            }
            
            const enContent = await enData.text();
            const enJson = JSON.parse(enContent);
            const sourceHash = enJson._metadata?.hash;
            
            if (!sourceHash) {
              console.error('ERROR: Source hash not found in English file');
              process.exit(1);
            }
            
            // Create translation jobs table if not exists
            const { error: tableError } = await supabase.rpc('create_translation_jobs_table');
            if (tableError && !tableError.message.includes('already exists')) {
              console.error('Error creating translation jobs table:', tableError);
            }
            
            // Trigger the translation worker to start processing
            console.log('Triggering translation worker...');
            const workerResponse = await fetch('https://koeppsasfaextkwyeiuv.supabase.co/functions/v1/translation-worker', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY}`
              },
              body: JSON.stringify({
                trigger: 'github-action',
                sourceHash: sourceHash
              })
            });
            
            if (workerResponse.ok) {
              const workerResult = await workerResponse.json();
              console.log('SUCCESS: Translation worker triggered:', workerResult.message);
            } else {
              console.warn('WARNING: Failed to trigger translation worker, jobs will be processed by cron');
            }
            
            // Queue translation jobs for all supported languages
            const supportedLanguages = ['sv', 'de', 'fr', 'es', 'it', 'pt', 'nl', 'da', 'no', 'fi', 'ja', 'zh'];
            const priorityLanguages = ['sv', 'de', 'fr', 'ja', 'zh']; // High priority
            
            const jobs = supportedLanguages.map(locale => ({
              locale,
              status: 'pending',
              priority: priorityLanguages.includes(locale) ? 1 : 2,
              source_hash: sourceHash,
              created_at: new Date().toISOString(),
              attempts: 0
            }));
            
            // Clear existing pending jobs for this hash
            await supabase
              .from('translation_jobs')
              .delete()
              .eq('source_hash', sourceHash);
            
            // Insert new jobs
            const { error: insertError } = await supabase
              .from('translation_jobs')
              .insert(jobs);
              
            if (insertError) {
              console.error('ERROR: Failed to create translation jobs:', insertError);
              process.exit(1);
            }
            
            console.log('SUCCESS: Translation pipeline triggered successfully!');
            console.log('INFO: Queued ' + supportedLanguages.length + ' translation jobs');
            console.log('INFO: High priority: ' + priorityLanguages.join(', '));
            console.log('INFO: Sequential processing will begin automatically');
          }
          
          triggerTranslationPipeline().catch(console.error);
          '
